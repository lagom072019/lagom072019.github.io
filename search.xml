<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CE1</title>
      <link href="/2023/10/04/CE1-and-CE2/"/>
      <url>/2023/10/04/CE1-and-CE2/</url>
      
        <content type="html"><![CDATA[<h1 id="C1"><a href="#C1" class="headerlink" title="C1"></a>C1</h1><h2 id="C1-J"><a href="#C1-J" class="headerlink" title="C1-J"></a>C1-J</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image.png"></p><h3 id="问题解答："><a href="#问题解答：" class="headerlink" title="问题解答："></a>问题解答：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-1.png"><br><img src="/2023/10/04/CE1-and-CE2/image-2.png"></p><p><strong>注意：当结果很大时，不能全部相加后再取模，否则即使使用 <code>long long </code>类型的变量依然有可能越界</strong></p><p><strong>正确做法：应该在其中的某些步骤先取模，然后再相加，最后再取模</strong><br><strong>关于代码中的最后一步：是因为C语言负数对正数取模后依然为负数，故添加这一步来进行修正</strong></p><p><em><strong>同样的，我们如果计算<code>x/y</code>向上取整的值，应该计算为<code>(x+y-1)/y</code></strong></em></p><h1 id="E1"><a href="#E1" class="headerlink" title="E1"></a>E1</h1><h2 id="E1-H"><a href="#E1-H" class="headerlink" title="E1-H"></a>E1-H</h2><h3 id="问题描述：-1"><a href="#问题描述：-1" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-3.png"></p><h3 id="问题解答：-1"><a href="#问题解答：-1" class="headerlink" title="问题解答："></a>问题解答：</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main(){    int test;    int a, b;    scanf("%d", &amp;test);        while(test--)    {            scanf("%d %d", &amp;a, &amp;b);            int jud = 0;            for(int i = 1; i &lt;= 6; i++)                for(int j = 1; j &lt;= 6; j++)                    for(int k = 1; k &lt;= 6; k++)                        {                            int A = 0, B = 0;                            if(i == 1 || i == 4) A += i;                            else B += i;                            if(j == 1 || j == 4) A += j;                            else B += j;                            if(k == 1 || k == 4) A += k;                            else B += k;                            if(A == a &amp;&amp; B == b)                            jud = 1;                        }                    if(jud) printf("Yes\n");                    else printf("No\n");    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>思考:如果不是三个骰子，而是n个骰子，那又该怎么解决呢？</strong></em></p><p><em><strong>答案在E2-J</strong></em></p><h2 id="E1-I"><a href="#E1-I" class="headerlink" title="E1-I"></a>E1-I</h2><h3 id="问题描述：-2"><a href="#问题描述：-2" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-5.png"></p><h3 id="问题解答：-2"><a href="#问题解答：-2" class="headerlink" title="问题解答："></a>问题解答：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-6.png"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">示例代码:2：#include&lt;stdio.h&gt;int main(){//读取    int m1, m2, m3;    int res1, res2, res3;    scanf("%d%d%d%d%d%d", &amp;m1, &amp;res1, &amp;m2, &amp;res2, &amp;m3, &amp;res3);//处理    int mul = res1;    for(int flag = 0; flag != 1; mul += m1)    {        if(mul % m2 == res2)        {            if(mul % m3 == res3)            {                flag = 1;            }        }    }        printf("%d", mul - m1);        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">示例代码3：#include&lt;stdio.h&gt;int main(){    //读取    int m1, m2, m3;    int res1, res2, res3;    scanf("%d%d%d%d%d%d", &amp;m1, &amp;res1, &amp;m2, &amp;res2, &amp;m3, &amp;res3);    //处理    int mul = m1 * m2 * m3;    int result = 0;    int t1 = mul / m1, t2 = mul / m2, t3 = mul / m3;    int tmp = t1 % m1; //当前循环变量    int cnt = 1;    while(tmp != 1) //先找到余1的    {        cnt++;        tmp = (t1 % m1) * (cnt % m1) % m1;    }    result += (res1 * cnt % mul) * t1 % mul; //再利用乘法找到余res1的    //使用取余运算防止乘法溢出    //当然使用long long int 也可以。    //以下类似    tmp = t2 % m2;    cnt = 1;    while(tmp != 1)    {    cnt++;    tmp = (t2 % m2) * (cnt % m2) % m2;    }    result = result % mul + (res2 * cnt % mul) * t2 % mul;    tmp = t3 % m3;    cnt = 1;    while(tmp != 1)    {        cnt++;        tmp = (t3 % m3) * (cnt % m3) % m3;    }    result = result % mul + (res3 * cnt % mul) * t3 % mul;    //需要注意，此处得到的结果并不一定是最小的，需要取模得到最小的。    printf("%d", result % mul);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h1><h2 id="C2-B"><a href="#C2-B" class="headerlink" title="C2-B"></a>C2-B</h2><h3 id="问题描述：-3"><a href="#问题描述：-3" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-7.png" alt="Alt text"></p><p><strong>非常提醒：只要有<code>%c,%s</code>等出现的时候，一定要注意处理前面输入时最后的回车</strong></p><p><strong>同样的，如果是<code>scanf("(%d,%d)",&amp;a,&amp;b);</code>等以字符开头的代码时，一定也要处理前面的回车，或者是在第一个括号前面留一个空格，如<code>scanf(" (%d,%d)",&amp;a,&amp;b);</code></strong></p><h3 id="问题解答：-3"><a href="#问题解答：-3" class="headerlink" title="问题解答："></a>问题解答：</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main(void){    int n,num=0;    char t;    char a[501]={0};    scanf("%d",&amp;n);    getchar();    for(int i=0;i&lt;n;i++){        scanf("%c",&amp;t);        if((t!='C')&amp;&amp;(t!='V')&amp;&amp;(t!='B')){            a[num]=t;            num++;        }    }    for(int j=0;j&lt;num+1;j++){        printf("%c",a[j]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C2-D"><a href="#C2-D" class="headerlink" title="C2-D"></a>C2-D</h2><h3 id="问题描述：-4"><a href="#问题描述：-4" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-8.png" alt="Alt text"></p><h3 id="问题解答：-4"><a href="#问题解答：-4" class="headerlink" title="问题解答："></a>问题解答：</h3><p><strong>计算时间时，可以考虑把小时和分钟都转化为分钟</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main(void){    int n,h,m,t;    scanf("%d",&amp;n);    for(int i=0;i&lt;n;i++){        scanf("%d%d",&amp;h,&amp;m);        t=h*60+m;        if((t&gt;1340)||(t&lt;370)) printf("E\n");        else printf("N\n");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C2-I"><a href="#C2-I" class="headerlink" title="C2-I"></a>C2-I</h2><h3 id="问题描述：-5"><a href="#问题描述：-5" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-9.png" alt="Alt text"></p><h3 id="问题解答：-5"><a href="#问题解答：-5" class="headerlink" title="问题解答："></a>问题解答：</h3><p><strong>本题难以用代码遍历的方法实现，实际上，本题是先用数学方法找出一种排列，然后直接将答案输出得到的（所以本质上是一个数学题）</strong></p><p><img src="/2023/10/04/CE1-and-CE2/image-10.png" alt="Alt text"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main(){    int n;    scanf("%d", &amp;n);    if(n == 1)  printf("1\n1");    else if(n == 2 || n == 3)  printf("-1");     else{        printf("%d\n", n);        for(int i = n - n % 2; i &gt; 4; i -= 2)  //从最大的不大于n的偶数开始，递减输出大于4的偶数        printf("%d ", i);        printf("3 1 4 2 ");        for(int i = 5; i &lt;= n; i += 2) //从5开始输出奇数，到最大的不大于n的奇数为止        printf("%d ", i);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E2-F"><a href="#E2-F" class="headerlink" title="E2-F"></a>E2-F</h2><h3 id="问题描述：-6"><a href="#问题描述：-6" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-13.png" alt="Alt text"></p><h3 id="问题解答：-6"><a href="#问题解答：-6" class="headerlink" title="问题解答："></a>问题解答：</h3><p><strong>注意：本题有两种做法：</strong></p><p><strong>1.可使用冒泡排序，将输入的数据从小到大或从大到小排序。</strong><br><strong>提醒：由于m&lt;=15，即最多只有16张校园卡，故最多只需要排序吗m+1次即可，否则会出现超时的情况。</strong></p><p>   <strong>2.可通过循环，找到数组中数据的最大值，然后将其重置为6（如果这个数本身大于6 的话），再继续找最大值，重复m+1次。</strong></p><p><em><strong>特别提醒：一定注意咖啡价格小于6的情况，注意最后总金额可能会超过<code>int</code>范围，注意用<code>long long</code>类型的变量。</strong></em></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;        int a[3000001];int main(void){         for(int t=0;t&lt;3000001;t++){            a[t]=0;         }        int n,m,t,ret=0;        long long sum=0;        scanf("%d%d",&amp;n,&amp;m);        for(int i=0;i&lt;n+1;i++){            scanf("%d",&amp;a[i]);        }        for(int j=0;j&lt;m+1;j++){            ret=0;            int max=a[0];            for(int k=0;k&lt;n+1;k++){                if(a[k]&gt;max) {                    max=a[k];                    ret=k;                }            }            if(a[ret]&gt;6) a[ret]=6;                    }                for(int l=0;l&lt;3000001;l++) sum+=a[l];        printf("%lld",sum);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E2-H"><a href="#E2-H" class="headerlink" title="E2-H"></a>E2-H</h2><h3 id="问题描述：-7"><a href="#问题描述：-7" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-14.png" alt="Alt text"></p><h3 id="问题解答：-7"><a href="#问题解答：-7" class="headerlink" title="问题解答："></a>问题解答：</h3><p><strong>本题可以用哈希数表的方法来减小时间复杂度，但需要用一种方法来将单词转化为数字，由于小写字母只有26个，可以考虑用ASCII码和26进制的方法进行转化。</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;    int b[5000000];int main(void){    int n;    char a[5],t;    scanf("%d",&amp;n);        for(int i=0;i&lt;n;i++){        scanf("%c",&amp;t);        for(int j=0;j&lt;4;j++){            scanf("%c",&amp;a[j]);        }        int k;        k=a[0]*27000+a[1]*900+a[2]*30+a[3]*1;        if(b[k]==1) printf("Moca has already memorized this word!\n");        else printf("Moca memorized a new word!\n");        b[k]=1;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E2-I"><a href="#E2-I" class="headerlink" title="E2-I"></a>E2-I</h2><h3 id="问题描述：-8"><a href="#问题描述：-8" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="/2023/10/04/CE1-and-CE2/image-4.png" alt="Alt text"></p><h3 id="问题解答：-8"><a href="#问题解答：-8" class="headerlink" title="问题解答："></a>问题解答：</h3><p><strong>核心关系：所求正多边形和已知三角形一定有相同的外接圆，因此可以用两点间距离公式得到各个边长，然后再用余弦定理和反三角函数求出角，再用正弦定理求出外接圆的半径，三个圆心角的最大公约数即为正多边形的一条边所对的圆心角</strong></p><p><strong>注意：1.不要忘记浮点数的精度损失问题</strong></p><p><strong>2.对于pi的使用，不要直接赋值3.1415926，要用acos（-1）</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;math.h&gt;#define epsilon 1e-6int main(void){    double x1,y1,x2,y2,x3,y3;    int ret=0,i;    scanf("%lf%lf%lf%lf%lf%lf",&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;x3,&amp;y3);    double l1,l2,l3;    l1=sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));    l2=sqrt((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1));    l3=sqrt((x2-x3)*(x2-x3)+(y2-y3)*(y2-y3));    double c3,c2,s3,r,alpha3,alpha2;    c3=(l2*l2+l3*l3-l1*l1)/(2*l2*l3);    c2=(l1*l1+l3*l3-l2*l2)/(2*l1*l3);    s3=sqrt(1-c3*c3);    alpha3=acos(c3);    alpha2=acos(c2);    const double pi=acos(-1);    for(i=3;i&lt;=100;i++){        double angle=pi/i;        for(int j=1;j&lt;=i;j++){            for(int k=1;k&lt;=i;k++){                if((fabs(alpha3-j*angle)&lt;epsilon)&amp;&amp;(fabs(alpha2-k*angle)&lt;epsilon)){                        ret=i;                        goto endLoop;                }            }        }    }    endLoop:    r=(l1/s3)/2;    double zita=(2*pi)/ret;    double L=sqrt(r*r+r*r-2*r*r*cos(zita));    double L1=ret*L;    printf("%f",L1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E2-J"><a href="#E2-J" class="headerlink" title="E2-J"></a>E2-J</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p><img src="/2023/10/04/CE1-and-CE2/image-15.png" alt="Alt text"></p><h3 id="问题解答：-9"><a href="#问题解答：-9" class="headerlink" title="问题解答："></a>问题解答：</h3><p><strong>注意：不要试图使用循环方法硬解，考虑使用数学方法解决</strong><br><img src="/2023/10/04/CE1-and-CE2/image-16.png" alt="Alt text"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;int main() {    int m, n, a, b, i;    scanf("%d", &amp;n);    for (i = 0; i &lt; n; i++) {        scanf("%d%d%d", &amp;m, &amp;a, &amp;b);        int sgn = 0; //标记有没有符合的情况        if (b == 0) {            if (m &lt;= a &amp;&amp; a &lt;= 4 * m &amp;&amp; (a - m) % 3 == 0) {                printf("Yes\n");                sgn = 1;                continue;                }            }        if (b == 2 || b == 3 || b == 5 || b == 6) {            if (m - 1 &lt;= a &amp;&amp; a &lt;= 4 * (m - 1) &amp;&amp; (a - (m - 1)) % 3 == 0) {                    printf("Yes\n");                    sgn = 1;                    continue;                    }                }        int a_min, b_min;        if (b % 6 == 0)b_min = b / 6;//注意：并不是所有情况都是b/6+1，对于这种问题，        else if (b == 4)b_min = 2;   //b是6的倍数和b不是6的倍数两种情况要分开讨论。        else b_min = b / 6 + 1;        a_min = a / 4 + a % 4;        int st;        if ((m - b / 2) &gt;= a_min) st = (m - b / 2);        else st = a_min;        if ((m - b / 2 &gt; a || m - b_min &lt; a_min)) {            printf("No\n");            continue;            }        for (int j = st; j &lt;= m - b_min &amp;&amp; j &lt;= a &amp;&amp; j &lt;= st + 3; j++) {            if ((a - j) % 3 == 0) {            sgn = 1;            printf("Yes\n");            break;            }        }        if (sgn == 0) {        printf("No\n");        }    }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 难题&amp;&amp;易错题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/03/hello-world/"/>
      <url>/2023/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
